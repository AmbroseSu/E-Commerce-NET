// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ECommerceDBContext))]
    partial class ECommerceDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Cart", b =>
                {
                    b.Property<int>("cartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cartId"));

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("cartId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("BusinessObject.CartItems", b =>
                {
                    b.Property<int>("cartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cartItemId"));

                    b.Property<DateTime>("addedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("cartId")
                        .HasColumnType("int");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("cartItemId");

                    b.HasIndex("cartId");

                    b.HasIndex("productId");

                    b.ToTable("CartItems", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Chats", b =>
                {
                    b.Property<int>("chatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("chatId"));

                    b.Property<string>("chatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("chatId");

                    b.ToTable("Chats", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Delivery", b =>
                {
                    b.Property<int>("deliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("deliveryId"));

                    b.Property<string>("currentLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("deliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("deliveryStatus")
                        .HasColumnType("int");

                    b.Property<string>("estimatedDeliveryTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("deliveryId");

                    b.HasIndex("userId");

                    b.ToTable("Delivery", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Inventory", b =>
                {
                    b.Property<int>("inventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("inventoryId"));

                    b.Property<DateTime>("expiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("manufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("warehouseId")
                        .HasColumnType("int");

                    b.HasKey("inventoryId");

                    b.HasIndex("productId");

                    b.HasIndex("warehouseId");

                    b.ToTable("Inventory", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Message", b =>
                {
                    b.Property<int>("messageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("messageId"));

                    b.Property<int>("chatId")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("isDelivered")
                        .HasColumnType("bit");

                    b.Property<bool>("isRead")
                        .HasColumnType("bit");

                    b.Property<bool>("isSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("sendAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("messageId");

                    b.HasIndex("chatId");

                    b.HasIndex("userId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("BusinessObject.OrderDetails", b =>
                {
                    b.Property<int>("orderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderDetailsId"));

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("orderDetailsId");

                    b.HasIndex("orderId");

                    b.HasIndex("productId");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Orders", b =>
                {
                    b.Property<int>("orderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderId"));

                    b.Property<int>("deliveryId")
                        .HasColumnType("int");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("orderStatus")
                        .HasColumnType("int");

                    b.Property<int>("paymentId")
                        .HasColumnType("int");

                    b.Property<float>("totalAmount")
                        .HasColumnType("real");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("orderId");

                    b.HasIndex("deliveryId")
                        .IsUnique();

                    b.HasIndex("paymentId")
                        .IsUnique();

                    b.HasIndex("userId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Payments", b =>
                {
                    b.Property<int>("paymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("paymentId"));

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("paymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("paymentStatus")
                        .HasColumnType("int");

                    b.Property<float>("totalAmount")
                        .HasColumnType("real");

                    b.HasKey("paymentId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductCategories", b =>
                {
                    b.Property<int>("productCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("productCategoryId"));

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("productCategoryId");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductImages", b =>
                {
                    b.Property<int>("productImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("productImageId"));

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.HasKey("productImageId");

                    b.HasIndex("productId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Products", b =>
                {
                    b.Property<int>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("productId"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<int>("productCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("productId");

                    b.HasIndex("productCategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Returns", b =>
                {
                    b.Property<int>("returnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("returnId"));

                    b.Property<DateTime>("expiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("manufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("returnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("returnStatus")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("returnId");

                    b.HasIndex("orderId");

                    b.HasIndex("productId");

                    b.HasIndex("userId");

                    b.ToTable("Returns", (string)null);
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cartId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fcm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BusinessObject.UserChat", b =>
                {
                    b.Property<int>("chatId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("userId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("chatId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("UserChats", (string)null);
                });

            modelBuilder.Entity("BusinessObject.VerificationToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("VerificationTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Warehouse", b =>
                {
                    b.Property<int>("warehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("warehouseId"));

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("warehouseId");

                    b.ToTable("Warehouses", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Cart", b =>
                {
                    b.HasOne("BusinessObject.User", "user")
                        .WithOne("cart")
                        .HasForeignKey("BusinessObject.Cart", "userId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Users");

                    b.Navigation("user");
                });

            modelBuilder.Entity("BusinessObject.CartItems", b =>
                {
                    b.HasOne("BusinessObject.Cart", "cart")
                        .WithMany("cartItems")
                        .HasForeignKey("cartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Cart_CartItems");

                    b.HasOne("BusinessObject.Products", "products")
                        .WithMany("cartItems")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cart");

                    b.Navigation("products");
                });

            modelBuilder.Entity("BusinessObject.Delivery", b =>
                {
                    b.HasOne("BusinessObject.User", "shipper")
                        .WithMany("deliveries")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("shipper");
                });

            modelBuilder.Entity("BusinessObject.Inventory", b =>
                {
                    b.HasOne("BusinessObject.Products", "products")
                        .WithMany("inventories")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Warehouse", "warehouse")
                        .WithMany("inventories")
                        .HasForeignKey("warehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("products");

                    b.Navigation("warehouse");
                });

            modelBuilder.Entity("BusinessObject.Message", b =>
                {
                    b.HasOne("BusinessObject.Chats", "chats")
                        .WithMany("messages")
                        .HasForeignKey("chatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.User", "sender")
                        .WithMany("messages")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chats");

                    b.Navigation("sender");
                });

            modelBuilder.Entity("BusinessObject.OrderDetails", b =>
                {
                    b.HasOne("BusinessObject.Orders", "orders")
                        .WithMany("orderDetails")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Products", "products")
                        .WithMany("orderDetails")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("orders");

                    b.Navigation("products");
                });

            modelBuilder.Entity("BusinessObject.Orders", b =>
                {
                    b.HasOne("BusinessObject.Delivery", "delivery")
                        .WithOne("orders")
                        .HasForeignKey("BusinessObject.Orders", "deliveryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Payments", "payments")
                        .WithOne("orders")
                        .HasForeignKey("BusinessObject.Orders", "paymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.User", "user")
                        .WithMany("orders")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("delivery");

                    b.Navigation("payments");

                    b.Navigation("user");
                });

            modelBuilder.Entity("BusinessObject.ProductImages", b =>
                {
                    b.HasOne("BusinessObject.Products", "products")
                        .WithMany("productImages")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("products");
                });

            modelBuilder.Entity("BusinessObject.Products", b =>
                {
                    b.HasOne("BusinessObject.ProductCategories", "productCategories")
                        .WithMany("products")
                        .HasForeignKey("productCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("productCategories");
                });

            modelBuilder.Entity("BusinessObject.Returns", b =>
                {
                    b.HasOne("BusinessObject.Orders", "orders")
                        .WithMany("returns")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Products", "products")
                        .WithMany("returns")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.User", "user")
                        .WithMany("returns")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("orders");

                    b.Navigation("products");

                    b.Navigation("user");
                });

            modelBuilder.Entity("BusinessObject.UserChat", b =>
                {
                    b.HasOne("BusinessObject.Chats", "chats")
                        .WithMany("userChats")
                        .HasForeignKey("chatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.User", "user")
                        .WithMany("userChats")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chats");

                    b.Navigation("user");
                });

            modelBuilder.Entity("BusinessObject.VerificationToken", b =>
                {
                    b.HasOne("BusinessObject.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("BusinessObject.Cart", b =>
                {
                    b.Navigation("cartItems");
                });

            modelBuilder.Entity("BusinessObject.Chats", b =>
                {
                    b.Navigation("messages");

                    b.Navigation("userChats");
                });

            modelBuilder.Entity("BusinessObject.Delivery", b =>
                {
                    b.Navigation("orders")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Orders", b =>
                {
                    b.Navigation("orderDetails");

                    b.Navigation("returns");
                });

            modelBuilder.Entity("BusinessObject.Payments", b =>
                {
                    b.Navigation("orders")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.ProductCategories", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("BusinessObject.Products", b =>
                {
                    b.Navigation("cartItems");

                    b.Navigation("inventories");

                    b.Navigation("orderDetails");

                    b.Navigation("productImages");

                    b.Navigation("returns");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.Navigation("cart")
                        .IsRequired();

                    b.Navigation("deliveries");

                    b.Navigation("messages");

                    b.Navigation("orders");

                    b.Navigation("returns");

                    b.Navigation("userChats");
                });

            modelBuilder.Entity("BusinessObject.Warehouse", b =>
                {
                    b.Navigation("inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
